743. Network Delay Time
https://leetcode.com/problems/network-delay-time/

int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        // solve this issue with dijkstra algorithm
        // min stack stores (arrive time, node index) pair
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minStack;
        // since the node index is from 1, for compute convenience, let's define the vector length as n+1
        int nPlusOne = n + 1;
        vector<vector<pair<int, int>>> graph(nPlusOne);
        // initially all nodes are unvisited
        vector<bool> visited(nPlusOne, false);
        for (auto& time : times) {
            graph[time[0]].emplace_back(time[1], time[2]);
        }
        minStack.push({0, k});
        int visitedNode = 0;
        int res = 0;
        while (minStack.size() > 0) {
            auto& topNode = minStack.top();
            int nodeIndex = topNode.second;
            int arriveTime = topNode.first;
            if (visited[nodeIndex]) {
                minStack.pop();
                continue;
            }
            res = arriveTime;
            visitedNode++;
            visited[nodeIndex] = true;
            if (visitedNode == n) {
                return res;
            }
            minStack.pop();
            for (auto& item : graph[nodeIndex]) {
                // if we have visited the node, ignore it
                if (visited[item.first]) {
                    continue;
                }
                minStack.push({res + item.second, item.first});
            }
        }
        return -1;
    }
    
    
    
    
    
----------------------------------------------------------------------------------------------------------------------------------------------------------
1314. Matrix Block Sum
https://leetcode.com/problems/matrix-block-sum/
    
This question is similar to a vector segment sum.
To extract sum of an arbitrary sub-array, we first form a prefix sum array.
[1, 2, 3, 4, 5] // original vector
[1, 3, 6, 10, 15] // prefix sum

To get sum of a sub array from index a to index b, sum(a, b), we can instead calculate prefix(b) - prefix(a-1)

Similar in 2D, we form prefix matrix, where sum[i][j] = sum of elements on top left of original matrix
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

[1, 3, 6]
[5, 12, 21]
[12, 27, 45]

Similarly, Sum of an arbitrary block from (i-K, j-K) to (i+K, j+K)
ans(i, j) = prefix(i+K, j+K) - prefix(i+K, j-K-1) - prefix (i-K-1, j+K) + prefix(i-K-1, j-K-1);

class Solution {
public: 
    int sizeX, sizeY;
    int extractSum(int i, int j, const vector<vector<int> >& sum) {
        if (i < 0 || j < 0) return 0;
        if (i >= sizeX) i = sizeX - 1;
        if (j >= sizeY) j = sizeY - 1;
        return sum[i][j];
    }
        
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int K) {
        sizeX = mat.size();
        sizeY = mat[0].size();
        
        vector<vector<int>> sum(sizeX, vector<int>(sizeY, 0));
        // Calculate prefix matrix 
        for (int i = 0; i < sizeX; i++) {
            for (int j = 0; j < sizeY; j++) {
                sum[i][j] = mat[i][j] + extractSum(i-1, j, sum) + extractSum(i, j-1, sum) - extractSum(i-1, j-1, sum);
            }
        }
        // Use prefix matrix to calculate our sum
        vector<vector<int>> ans(sizeX, vector<int>(sizeY, 0));
        for (int i = 0; i < sizeX; i++) {
            for (int j = 0; j < sizeY; j++) {
                ans[i][j] = extractSum(i+K, j+K, sum) - extractSum(i+K, j-K-1,sum) - extractSum (i-K-1, j+K, sum) + extractSum(i-K-1, j-K-1, sum);
            }
        }
        return ans;
    }
};





--------------------------------------------------------------------------------------------------------------------------------------------------------------------
93. Restore IP Addresses
https://leetcode.com/problems/restore-ip-addresses/

class Solution {
public:
    bool check(string s){
        int n=s.size();
        //if the size of string is 1 that is always possible so return true
        if(n==1){
            return true;
        }
        //if we have length >3 or string starts with 0 return false
        if(n>3||s[0]=='0'){
            return false;
        }
        //we are converting string to integer to check if it is less than equalto 255
        int val=stoi(s);
        if(val>255){
            return false;
        }
        //return true at last
        return true;
    }
    vector<string> restoreIpAddresses(string s) {
        int n=s.size();
        //we will store our ans in ans vector of strings
        vector<string>ans;
        //the max length of the ip address could be 12 as 255.255.255.255 so 
        //all the string s with size greater than 12 can have ans
        if(n>12){
            return ans;
        }
        //now we have our string of length 12 or less than 12 so now 
            //1. we have to spit the s in parts such that it satisfy the ip address conditions
            //2. if all 4 strings satisfy the condition we will push into ans vector
        
        for(int i=1;i<=3;i++){//for the length before first '.'
            for(int j=1;j<=3;j++){//for the length between first and second '.'
                for(int k=1;k<=3;k++){//for the length between second and third '.'
                    //checking condition if the last segment is of length 3 or less
                    if(i+j+k<n&&i+j+k+3>=n){
                        //dividing the s int substrings 
                        string a=s.substr(0,i);
                        string b=s.substr(i,j);
                        string c=s.substr(j+i,k);
                        string d=s.substr(i+j+k);
                        //if all the substring satisfy the check function condition 
                        //then we will push into ans vector 
                        if(check(a)&&check(b)&&check(c)&&check(d)){
                            ans.push_back(a+"."+b+"."+c+"."+d);
                        }
                    }
                }
            }
         return ans;
    }
};
