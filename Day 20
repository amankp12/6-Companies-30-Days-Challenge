1054. Distant Barcodes
https://leetcode.com/problems/distant-barcodes/

Intuition
In the worst case, we can have (N + 1) / 2 occurrences of the same barcode. This barcode needs to be placed in [0, 2, 4 ...] positions to avoid the repetition.

Solution
Count occurrences of each barcode using a hash map
Use a set to sort barcodes by their number of occurrences
Starting from most frequent, fill even positions with barcodes
Then fill odd positions with remaining barcodes
image

vector<int> rearrangeBarcodes(vector<int>& b, int pos = 0) {
  unordered_map<int, int> m;
  set<pair<int, int>> s;
  for (auto n : b) ++m[n];
  for (auto it = begin(m); it != end(m); ++it) s.insert({ it->second, it->first });
  for (auto it = s.rbegin(); it != s.rend(); ++it) {
    for (auto cnt = 0; cnt < it->first; ++cnt, pos += 2) {
      if (pos >= b.size()) pos = 1;
      b[pos] = it->second;
    }
  }
  return b;
}
Complexity Analysis
Runtime: O(n log n), where n is the number of unique elements.
Memory: O(n). We store unique elements in the map and set.

O(N) Solution
Like Jianwen observed below, we do not need to sort elements by the number of occurrences, we just need to determine the most frequent one and fill it first. The rest of barcodes can be filled irrespective of their occurrences. Note that you still fill all occurrences of the same barcode skipping a position before moving to the next barcode.

Since barcodes are limited to [1...10000], we can use an array instead of hash map to make it even faster.

vector<int> rearrangeBarcodes(vector<int>& b) {
  short m[10001] = {};
  short max_cnt = 0, max_n = 0, pos = 0;
  for (auto n : b) {
      max_cnt = max(max_cnt, ++m[n]);
      max_n = max_cnt == m[n] ? n : max_n;
  }
  for (auto i = 0; i <= 10000; ++i) {
    auto n = i == 0 ? max_n : i;
    while (m[n]-- > 0) {
        b[pos] = n;
        pos = pos + 2 < b.size() ? pos + 2 : 1;
    }
  }
  return b;
}
Complexity Analysis
Runtime: O(N), where N is the total number of elements.
Memory: O(n), where n is the number of unique elements we track the count for.





------------------------------------------------------------------------------------------------------------------------------------------------------------------
837. New 21 Game
https://leetcode.com/problems/new-21-game/

Intuition:
The same problems as "Climbing Stairs" or "Fibo Sequence".

Explanation:
dp[i] is the probability that we get points i at some moment.
In another word:
1 - dp[i]is the probability that we skip the points i.

The do equation is that:
dp[i] = sum(last W dp values) / W

To get Wsum = sum(last W dp values),
we can maintain a sliding window with size at most W.


Time Complexity:
Time O(N)
Space O(N), can be improve to O(W)


C++:

    double new21Game(int N, int K, int W) {
        if (K == 0 || N >= K + W) return 1.0;
        vector<double> dp(N + 1);
        dp[0] = 1.0;
        double Wsum = 1.0, res = 0.0;
        for (int i = 1; i <= N; ++i) {
            dp[i] = Wsum / W;
            if (i < K) Wsum += dp[i]; else res += dp[i];
            if (i - W >= 0) Wsum -= dp[i - W];
        }
        return res;
    }
    
    
    
    
------------------------------------------------------------------------------------------------------------------------------------------------------------
1461. Check If a String Contains All Binary Codes of Size K
https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/


Insert all substrings of size k in a set.
If we get all the codes the set should be of the size of 2^k (as the no of binary codes of size k is 2^k)

bool hasAllCodes(string s, int k) {
	
	//Edge case
	if(k > s.size()) return false;
    
    unordered_set<string> res_set;
    
	//Insertion into the set
    for(int i =0;i<= s.size()-k;i++)
        res_set.insert(s.substr(i,k));
    
	//Comparing res with 2^k
    return res_set.size() == pow(2,k);
}
