1975. Maximum Matrix Sum
https://leetcode.com/problems/maximum-matrix-sum/

Logic
It is clearly mentioned that we can pick any two adjacent cells and mutliply them by -1. Also, this operation can be repeated any number of times.

You may notice that we can change the sign of any two elements just by selecting them and multiplying them by -1. This means that the position of negative and positive numbers doesn't matter because we can definitely reach every cell and perform the same operation.

Another observation is that for any number, if we do this operation even number of times, then the sign of the element doesn't change.

image


Bingo !! We will make use of this logic and one by one, make the negative numbers positive as much as we can.

NOTICE : If there are odd number of positive numbers in the matrix, then no matter what move you chose, you will always end up having one negative number at the end in the complete matrix because at any moment, we will be having odd number of negatives.

image


We can make the smallest number is the matrix negative by performing this operation some x number of times and then we can get the result.

Approach
Find the absolute sum of all the numbers in the matrix
Find the absolute value of the smallest number in the matrix
Count of negative numbers in the matrix
If count of negatives is even, then all elements can be made positive by performing the operation, so just return the total sum of the matrix
If count of negatives is odd, then we can make the smallest number in the matrix as negative and then return the sum
NOTE : Here the result will be sum-2*minElement as you are not including this element.

Please upvote if you like the explanation and the approach

Accepted Solution
/**
 * @author      : archit
 * @GitHub      : archit-1997
 * @Email       : architsingh456@gmail.com
 * @file        : maximumMatrixSum.cpp
 * @created     : Saturday Aug 21, 2021 20:11:56 IST
 */

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    long long maxMatrixSum(vector<vector<int>>& matrix) {
        int r=matrix.size(),c=matrix[0].size();

        //we need to find the min number in the matrix and also count of negative numbers in the matrix
        int small=INT_MAX,count=0;
        long long int sum=0;

        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                int val=matrix[i][j];
				//finding the smallest absolute value in the matrix
                small=min(small,abs(val));
				//counting the negative numbers
                if(val<0)
                    count++;
				//finding the sum of all the values
                sum+=abs(val);
            }
        }
		//if even number of negatives, then just return sum
        if(count%2==0)
            return sum;
        else
		//subtract the value of the min absolute element
            return sum-2*small;
    }
};





-------------------------------------------------------------------------------------------------------------------------------------------------------------------
2034. Stock Price Fluctuation 
https://leetcode.com/problems/stock-price-fluctuation/

Explanation
Use whatever a sorted data structure in each lanuage,
most likely a binary search tree.


Complexity
Time O(logn) for each function
Space O(n)

C++

public:
    map<int, int> rec;
    multiset<int> count;

    void update(int t, int p) {
        if (rec.find(t) != rec.end())
            count.erase(count.find(rec[t]));
        rec[t] = p;
        count.insert(p);
    }

    int current() {
        return rec.rbegin()->second;
    }

    int maximum() {
        return *count.rbegin();
    }

    int minimum() {
        return *count.begin();
    }
    
    
    
    
    
   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
581. Shortest Unsorted Continuous Subarray
https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

Sort

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> sorted(nums);
        sort(sorted.begin(), sorted.end());
        int n = nums.size(), i = 0, j = n - 1;
        while (i < n && nums[i] == sorted[i]) {
            i++;
        }
        while (j > i && nums[j] == sorted[j]) {
            j--;
        }
        return j + 1 - i;
    }
};

max on left, min on right - O(N)
The idea is that:

From the left, for a number to stay untouched, there need to be no number less than it on the right hand side;
From the right, for a number to stay untouched, there need to be no number greater than it on the left hand side;
Those 2 can be easily checked if we build 2 vectors:

max so far from the left,
and min so far from the right;

/**
 *            /------------\
 * nums:  [2, 6, 4, 8, 10, 9, 15]
 * minr:   2  4  4  8   9  9  15
 *         <--------------------
 * maxl:   2  6  6  8  10 10  15
 *         -------------------->
 */
 
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size();
        vector<int> maxlhs(n);   // max number from left to cur
        vector<int> minrhs(n);   // min number from right to cur
        for (int i = n - 1, minr = INT_MAX; i >= 0; i--) minrhs[i] = minr = min(minr, nums[i]);
        for (int i = 0,     maxl = INT_MIN; i < n;  i++) maxlhs[i] = maxl = max(maxl, nums[i]);

        int i = 0, j = n - 1;
        while (i < n && nums[i] <= minrhs[i]) i++;
        while (j > i && nums[j] >= maxlhs[j]) j--;

        return j + 1 - i;
    }
};
