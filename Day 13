481. Magical String
https://leetcode.com/problems/magical-string/description/

How would you produce the string?
Notice that it starts with 122 and there on you keep adding either 1 or 2 x number of times to it and build it. x is determined by the s[ind] where ind starts with 2 (last index at beginning). s[2] = 2, so you add two 1s and then flip the character to be added to become 2. ind becomes 3, s[3] = 1, so add one 2 and so on until length of string is n or more.

class Solution {
public:
    char flip(char c) {
        if(c == '1')
            return '2';
        else return '1';
    }
    
    int magicalString(int n) {
        string s = "122";
        char next = '1';
        int ind = 2;
        int ans = 1;
        while(s.size() < n) {
            int t = s[ind] - '0';
            while(t--) {
                s.push_back(next);
                ans += ((s.size() <= n && next == '1') ? 1 : 0);
            }
            ind++;
            next = flip(next);
        }
        return ans;
    }
};





------------------------------------------------------------------------------------------------------------------------------------------------------------------
600. Non-negative Integers without Consecutive Ones
https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/

The solution is based on 2 facts:

the number of length k string without consecutive 1 is Fibonacci sequence f(k);
For example, if k = 5, the range is 00000-11111. We can consider it as two ranges, which are 00000-01111 and 10000-10111. Any number >= 11000 is not allowed due to consecutive 1. The first case is actually f(4), and the second case is f(3), so f(5)= f(4)+f(3).
Scan the number from most significant digit, i.e. left to right, in binary format. If we find a '1' with k digits to the right, count increases by f(k) because we can put a '0' at this digit and any valid length k string behind; After that, we continue the loop to consider the remaining cases, i.e., we put a '1' at this digit. If consecutive 1s are found, we exit the loop and return the answer. By the end of the loop, we return count+1 to include the number n itself.
For example, if n is 10010110,
we find first '1' at 7 digits to the right, we add range 00000000-01111111, which is f(7);
second '1' at 4 digits to the right, add range 10000000-10001111, f(4);
third '1' at 2 digits to the right, add range 10010000-10010011, f(2);
fourth '1' at 1 digits to the right, add range 10010100-10010101, f(1);
Those ranges are continuous from 00000000 to 10010101. And any greater number <= n will have consecutive 1.
class Solution {
public:
    int findIntegers(int num) {
        int f[32];
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; ++i)
            f[i] = f[i-1]+f[i-2];
        int ans = 0, k = 30, pre_bit = 0;
        while (k >= 0) {
            if (num&(1<<k)) {
                ans += f[k];
                if (pre_bit) return ans;
                pre_bit = 1;
            }
            else
                pre_bit = 0;
            --k;
        }
        return ans+1;
    }
};





--------------------------------------------------------------------------------------------------------------------------------------------------------------
688. Knight Probability in Chessboard
https://leetcode.com/problems/knight-probability-in-chessboard/

Imp to note :

check the given constraints.

figure out the base cases.

when there is no movement i.e. when k is 0 there can be a probabilty of having knight at the chess borad is 1

At every step the knight has 8 choices to move some can be in the board and some can be out of it

the ones which are at the out of the board we can simply ignore that or make it a zero.

These are choices of Knight :
( row-2, column -1)
( row-1, column -2)
( row+2, column +1)
( row+1, column +2)
( row-2, column +1)
( row+2, column -1)
( row-1, column +2)
( row+1, column -2)

Dry run the code.
Please upvote and do comment if there is any doubt

class Solution {
public:
double dp[26][26][101];
    double knight(int n , int k, int row, int column){
         //base cases
          if(row <0 || column <0|| row>= n ||column >= n){
             return 0;
             }
          if(k ==0) return 1; // if k ie. no. of steps is 0 than the probabilty to have Knight on borad is 1
          if(dp[row][column][k]){
              return dp[row][column][k];
         }
          double sum =0; // to find the sum
        
         sum = knight(n, k-1, row-2, column -1) + knight(n, k-1, row-1, column -2) + 
            knight(n, k-1, row+2, column +1) + knight(n, k-1, row+1, column +2)+ 
            knight(n, k-1, row-2, column +1)+ knight(n, k-1, row+2, column -1) +
            knight(n, k-1, row-1, column +2) + knight(n, k-1, row+1, column -2);
          sum /= 8;
          return dp[row][column][k] = sum;
                                                            
    }
    double knightProbability(int n, int k, int row, int column) {
        return knight(n, k, row, column);
    }
};
