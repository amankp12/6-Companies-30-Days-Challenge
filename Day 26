778. Swim in Rising Water
https://leetcode.com/problems/swim-in-rising-water/

Solution - I (Brute-Force)

We can observe that the problem basically asks us to find a path such that the maximum waterLevel w_lvl (value of a cell) of some intermediate cell of that path is minimized.
We can start with the brute force approach and explore all the possible paths to reach the end of the grid. The path which minimizes the maximum value of some cell in a path will be chosen and that water level - w_lvl will be our answer.

int n;
int swimInWater(vector<vector<int>>& grid) {
	n = size(grid);
	vector<vector<int> >vis(n, vector<int>(n));
	return solve(grid, vis, 0, 0);
}
int solve(vector<vector<int>>& grid, vector<vector<int>> vis, int i, int j, int w_lvl = 0) {
	if(i < 0 || j < 0 || i >= n || j >= n || vis[i][j]) return 10000;  // out-of-bounds / already visited
	if(i == n - 1 && j == n - 1) return max(w_lvl, grid[i][j]);
	vis[i][j] = true;            // mark as visited so we don't keep visiting back-and-forth
	w_lvl = max(w_lvl, grid[i][j]);  // update max intermediate value for current path
	// explore all 4 possible options from current cell and choose the path with minimum w_lvl -
	return min({solve(grid, vis, i + 1, j, w_lvl), solve(grid, vis, i - 1, j, w_lvl), solve(grid, vis, i, j + 1, w_lvl), solve(grid, vis, i, j - 1, w_lvl)});
}

Brute-Force Variant -II (slightly optimized)
Time Complexity : O(4n2), for each cell of the grid, we have 4 choices. So, in the worst case we may need 4*4*4*...n2times

Space Complexity : O(n2) for the optimzed verison, O(n4) for the first version since copy for vis is made for each recursive call

int n;
int swimInWater(vector<vector<int>>& grid) {
	n = size(grid);
	vector<vector<int> >vis(n, vector<int>(n));
	return solve(grid, vis, 0, 0);
}
int solve(vector<vector<int>>& grid, vector<vector<int>> vis, int i, int j, int w_lvl = 0) {
	if(i < 0 || j < 0 || i >= n || j >= n || vis[i][j]) return 10000;  // out-of-bounds / already visited
	if(i == n - 1 && j == n - 1) return max(w_lvl, grid[i][j]);
	vis[i][j] = true;            // mark as visited so we don't keep visiting back-and-forth
	w_lvl = max(w_lvl, grid[i][j]);  // update max intermediate value for current path
	// explore all 4 possible options from current cell and choose the path with minimum w_lvl -
	return min({solve(grid, vis, i + 1, j, w_lvl), solve(grid, vis, i - 1, j, w_lvl), solve(grid, vis, i, j + 1, w_lvl), solve(grid, vis, i, j - 1, w_lvl)});
}
Time Complexity : O(4n2), for each cell of the grid, we have 4 choices. So, in the worst case we may need 4*4*4*...n2times
Space Complexity : O(n2) for the optimzed verison, O(n4) for the first version since copy for vis is made for each recursive call

Solution - II (Search lowest valid water-level)

Exploring all the possible path options is very time-consuming. Instead of exploring all the available paths and then choosing the path with lowest maximum water level - w_lvl , we can instead set an upper-limit to w_lvl ourselves, starting from 1 till n*n-1. The lowest water level required to reach the end will be our answer.

Here, instead of exploring all paths, we have limited ourselves to only exploring a single path which has maximum intermediate cell value = w_lvl and returning as soon as we find the first path that takes us to the end. Thus, we have limited our search space to a great extent.

Another small optimization is to start checking directly from max of max( grid[0][0], grid[n-1][n-1], 2*(n-1) ) instead of w_lvl=1 (Credits to @ud240 & @nicolattu). That's because every path will contain grid[0][0] and grid[n-1][n-1], and 2*(n-1) because grid elements are always a permutation of 0...n*n-1 and thus there will always be a cell with value >= 2*(n-1) in every path.

int n, moves[4][2] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
int swimInWater(vector<vector<int>>& grid) {
    n = size(grid);        
    vector<vector<int>>vis(n, vector<int>(n));
	int minReq = max({ 2*(n-1), grid[0][0], grid[n-1][n-1] });
    for(int w_lvl = minReq; w_lvl < n*n; w_lvl++) {
        if(dfs(grid, vis, 0, 0, w_lvl)) return w_lvl;
        for_each(begin(vis), end(vis), [](auto& v){fill(begin(v), end(v), 0);});  // reset the vis array back to not-visited
    }        
    return n*n;
}

bool dfs(vector<vector<int>>& grid, vector<vector<int>>& vis, int i, int j, int w_lvl) {
    if(i < 0 || j < 0 || i >= n || j >= n || vis[i][j] || grid[i][j] > w_lvl) return false; // out-of-bound / already visited / cell value > max w_lvl allowed
    if(i == n - 1 && j == n - 1) return true;
    vis[i][j] = true;
    for(int k = 0; k < 4; k++) // search all available option till any of it leads us to the end
        if(dfs(grid, vis, i + moves[k][0], j + moves[k][1], w_lvl)) return true;
    return false;
}
Time Complexity : O(n4), we are exploring all water-level values from 1 to n*n. For each water-level MAX, we call dfs() having O(n2) time complexity in the worst case. Thus, overall time complexity becomes O(n*n) * O(n2) = O(n4)

Space Complexity : O(n2)

Solution - III (Binary-Search)

Instead of searching linearly as we did in the above approach, we can use binary search to find the lowest valid water-level. Our search space is sorted and it the range [1...n*n-1] and thus binary search can be applied here.

In previous approach, for the worst-case scenario we would have called dfs() for n*n times.
Binary search will reduce worst-case number of calls required to O(logn2) = O(logn).

Also, I have replaced the vis below with a boolean C-style array (for faster runtime) of 50x50 which is the max grid dimensions. Since the constraints are small, I have opted for fixed size declaration intead dynamic allocation, the syntax of which is slightly messy.

int n, moves[4][2] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
int swimInWater(vector<vector<int>>& grid) {
	n = size(grid);
	int l = max({ 2*(n-1), grid[0][0], grid[n-1][n-1] }), r = n*n-1, mid;
	bool vis[50][50]{};
	while(l <= r) {            
		mid = (l + r) / 2;
		if(solve(grid, vis, 0, 0, mid)) r = mid - 1;  // we are able to reach end with MAX=mid   => try lower to minimze it
		else l = mid + 1;                             // we fail to reach the end with MAX=mid   => try higher so we can reach the end
		memset(vis, false, sizeof vis);               // reset vis back to all false
	}
	return l;
}

bool solve(vector<vector<int>>& grid, bool vis[][50], int i, int j, int w_lvl) {
	if(i < 0 || j < 0 || i >= n || j >= n || vis[i][j] || grid[i][j] > w_lvl) return false;
	if(i == n - 1 && j == n - 1) return true;
	vis[i][j] = true;
	for(int k = 0; k < 4; k++) 
		if(solve(grid, vis, i + moves[k][0], j + moves[k][1], w_lvl)) return true;
	return false;
}
Time Complexity : O(n2logn), O(n2) for dfs call and O(logn) for binary search over 1...n*n.
Space Complexity : O(n2)




------------------------------------------------------------------------------------------------------------------------------------------------------------------
2396. Strictly Palindromic Number
https://leetcode.com/problems/strictly-palindromic-number/

Intuition
The condition is extreme hard to satisfy, think about it...
for every base b between 2 and n - 2...
4 is not strictly palindromic number
5 is not strictly palindromic number
then the bigger, the more impossible.
Just return false


Prove
4 = 100 (base 2), so 4 is not strictly palindromic number
for n > 4, consider the base n - 2.
In base n - 1, n = 11.
In base n - 2, n = 12, so n is not strictly palindromic number.

There is no strictly palindromic number n where n >= 4


More
I think it may make some sense to ask if there a base b
between 2 and n - 2 that n is palindromic,
otherwise why it bothers to mention n - 2?

It's n - 2, not n - 1,
since for all n > 1,
n is 11 in base n - 2.
(Because n = (n - 1) + (1))

Then it's at least a algorithme problem to solve,
instead of a brain-teaser.

Maybe Leetcode just gave a wrong description.

Complexity
Time O(1)
Space O(1)

C++
return false;

class Solution {
public:
    bool isStrictlyPalindromic(int n) 
    {
        int tmp;                      // store n into a temp val so actual n will not affected
        string base;                  // for storing the value of each base (2 to n-2)
        
        for(int i=2;i<=n-2;i++)
        {
            tmp=n;
            
            while(tmp)                                   // calculating the base i for value tmp 
            {
                base = base + to_string(tmp%i);
                tmp = tmp/i;
            }
            
            int st=0;
            int en=base.size()-1;
            while(st<en)                                // check for palindrom
            {
                if(base[st++]!=base[en--]) return false;
            }
            
            base.clear();                               // clear base each time after iteration
        }
        return true;
    }
};




-------------------------------------------------------------------------------------------------------------------------------------------------------------------
1947. Maximum Compatibility Score Sum
https://leetcode.com/problems/maximum-compatibility-score-sum/

As constraints 1 <= m, n <= 8 are very small, we can easily get our answer by evaluating all possible combinations.
To generate all possible combinations of students and mentors, we can shuffle any one of them in all possible way.

In below code i m trying to shuffle students, but shuffling of vector can be costly so I have shuffled their index and evaluated their responses by using shuffled index.

C++ code:

int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
	int ans = 0;
	vector<int> pos;
	for(int i=0;i<students.size();i++) pos.push_back(i);
	do{
		int curr = 0;
		for(int i = 0;i<students.size(); i++)
			for(int j=0;j<students[pos[i]].size();j++)
				curr += (students[pos[i]][j] == mentors[i][j]);
		ans = max(ans, curr);
	} while(next_permutation(pos.begin(), pos.end()));
	return ans;
}
