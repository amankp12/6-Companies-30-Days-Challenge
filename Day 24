2261. K Divisible Elements Subarrays
https://leetcode.com/problems/k-divisible-elements-subarrays/

It's tempting to apply a sliding window technique here, however, it won't help us identify distinct subarrays.
Because constraints are low (n <= 200), we can just identify all valid subarrays O(n ^ 2), and use a set to dedup them O(n). So, the overall complexity would be O(n ^ 3).

For O(n ^ 2) solution, we can use a rolling hash (Rabin-Karp). Note that we only need to check hashes for arrays of the same size, which reduces the collision probability.

We can also use a Trie to achieve a quadratic complexity - check the second solution below.

Rolling Hash (Simple)
We need to do the collision check, but here I omitted it for simplicity (see third solution below if you want to handle collisions).
C++

int countDistinct(vector<int>& nums, int k, int p) {
    int cnt[201] = {}, hash[201] = {}, res = 0;
    for (int sz = 0; sz < nums.size(); ++sz) {
        unordered_set<int> s;
        for (int i = 0; i + sz < nums.size(); ++i) {
            cnt[i] += nums[i + sz] % p == 0;
            if (cnt[i] <= k) {
                hash[i] = ((long long)hash[i] * 200 + nums[i + sz]) % 1000000007;
                res += s.insert(hash[i]).second;
            }
        }
    }
    return res;
}

Trie
We increment counters for each Trie node to detect if a substring is a duplicate.

C++

struct Trie {
    unordered_map<int, Trie*> ch;
    int cnt = 0;
    int insert(vector<int>& nums, int i, int k, int p) {
        if (i == nums.size() || k - (nums[i] % p == 0) < 0)
            return 0;
        if (ch[nums[i]] == nullptr)
            ch[nums[i]] = new Trie();
        return (++ch[nums[i]]->cnt == 1) + 
            ch[nums[i]]->insert(nums, i + 1, k - (nums[i] % p == 0), p);
    }
};
int countDistinct(vector<int>& nums, int k, int p) {
    int res = 0;
    Trie t;
    for (int i = 0; i < nums.size(); ++i)
        res += t.insert(nums, i, k, p);
    return res;
}

Rolling Hash (Collision Check)
C++

int countDistinct(vector<int>& nums, int k, int p) {
    int cnt[201] = {}, hash[201] = {}, res = 0;
    for (int sz = 0; sz < nums.size(); ++sz) {
        unordered_map<int, vector<int>> s;
        auto collision = [&](const auto &ids, int i) {
            for (int j : ids)
                if (equal(begin(nums) + i, begin(nums) + i + sz + 1, begin(nums) + j))
                    return true;
            return false;
        };
        for (int i = 0; i + sz < nums.size(); ++i) {
            cnt[i] += nums[i + sz] % p == 0;
            if (cnt[i] <= k) {
                hash[i] = ((long long)hash[i] * 200 + nums[i + sz]) % 1000000007;
                if (!collision(s[hash[i]], i)) {
                    s[hash[i]].push_back(i);
                    ++res;
                }
            }
        }
    }
    return res;
}





-------------------------------------------------------------------------------------------------------------------------------------------------------------------
528. Random Pick with Weight
https://leetcode.com/problems/random-pick-with-weight/

For [1,3,4,6] the probablity of choosing index 0 is 1/14, 1 is 3/14, 2 is 4/14 and 3 is 6/14.
Using Prefix sum I have converted the weight vector into a vector v:- [1,1+3, 1+3+4, 1+3+4+6].
In case of random numbers from [0,14), if the number is 0 then I return index 0, if number lies between [1-4) I return index 1, if number lies between [4-8) I return index 2 and if it lies in [8,14) I return index 3.
So, basically I'm returning the index of the upperbound of the random generated number from vector v.

class Solution {
public:
    vector<int> v;
    Solution(vector<int>& w) {
        v.push_back(w[0]);
        for(int i=1;i<w.size();i++){
            v.push_back(v[i-1]+w[i]);
        }
    }
    
    int pickIndex() {
        int n= rand()%v[v.size()-1];
        auto it=upper_bound(v.begin(),v.end(),n);
        return it-v.begin();
    }
};
Solution using lower_bound:-

class Solution {
public:
    vector<int> v;
    Solution(vector<int>& w) {
        v.push_back(w[0]);
        for(int i=1;i<w.size();i++){
            v.push_back(v[i-1]+w[i]);
        }
    }
    
    int pickIndex() {
        int n= rand()%v.back()+1;
        auto it=lower_bound(v.begin(),v.end(),n);
        return it-v.begin();
    }
};





--------------------------------------------------------------------------------------------------------------------------------------------------------------
1561. Maximum Number of Coins You Can Get
https://leetcode.com/problems/maximum-number-of-coins-you-can-get/

Intuition
We want to compare the numbers, we need to sort.
We give the smallest values Bob,
give the biggest to Alice,
and leave the second biggest to us.
Then we repeat this process.

Explanation
We give small value to Bob,
give the large value to Alice,
and we pick the medium values.

The final assignment will be like:
S S S S S S M L M L M L M L M L

The first third part is given to Bob,
start from A[n/3], we pick one element from every two.

Complexity
Time O(sort)
Space O(sort)

C++:
    int maxCoins(vector<int>& A) {
        sort(A.begin(), A.end());
        int res = 0, n = A.size();
        for (int i = n / 3; i < n; i += 2)
            res += A[i];
        return res;
    }
