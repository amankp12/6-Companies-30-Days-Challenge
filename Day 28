1348. Tweet Counts Per Frequency
https://leetcode.com/problems/tweet-counts-per-frequency/

Here the map has key = startTime, Value = unordered_map -> K: TweetName, V : Count of Tweets.
Insert is log(N)
Worst Case for getTweetCountsPerFrequency if the start and End are at boundaries : O(n^2)

Explanation:
Insertion : We directly insert into the data-structure which stores the tweet sorted by the startTime.
getTweetCountsPerFrequency : Get the Start and End Range User lower_bound (logn) and iterate within that range.
Count the number of tweets and add to result.

map<int,unordered_map<string,int>> ds;
    TweetCounts() {
        
    }
    
    void recordTweet(string tweetName, int time) {
        ds[time][tweetName]++;
    }
    
    vector<int> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime) {
        vector<int> res;
        int f;
        if (freq == "minute") f = 60;
        if (freq == "hour") f = 3600;
        if (freq == "day") f = 86400;
    
        while(startTime <= endTime) {
            int count = 0;
            int newEndTime = min(startTime+f,endTime+1);
            auto it = ds.lower_bound(startTime);
            auto end = ds.lower_bound(newEndTime);
            while(it != end) {
                if(it->second.find(tweetName) != it->second.end()) {
                    count+=it->second[tweetName];
                }
                it++;
            }
            res.push_back(count);
            startTime += f;
        }
        
        return res;
    }
    
    
    
    
---------------------------------------------------------------------------------------------------------------------------------------------------------------
2428. Maximum Sum of an Hourglass
https://leetcode.com/problems/maximum-sum-of-an-hourglass/

    TC: O(MN)
    SC: O(MN)
    
    Computing the hour glass is simple by iterating the hour glass elements, but
    if done for all positions in the grid, then we are doing repeatitive computations.
    
    To avoid that, we save the row and col wise cummulative sums. Then when we want to
    find the sum of hour glass, it is simply:
    sum(top hour glass row) + middle stem + sum(bottom hour glass row)
    Since we have the cummulative sum, we can use that to avoid computing the sum for
    each hour glass and instead return the sum in O(1).

class Solution {
public:
    int maxSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        // row_sum and col_sum saves the cummulative sum row and col
        // wise respectively.
        vector<vector<long long>> row_sum(m, vector<long long>(n, 0)), 
            col_sum(m, vector<long long>(n, 0));
        
        long long max_sum = 0;
         
        // Compute the cummulative sum row and col wise
        for(int r = 0; r < m; r++) {
            for(int c = 0; c < n; c++) {
                // row sum
                row_sum[r][c] = (c > 0 ? row_sum[r][c-1] : 0) + grid[r][c];
                // col sum
                col_sum[r][c] = (r > 0 ? col_sum[r-1][c] : 0) + grid[r][c];
            }
        }
        
        // find the max hour glass
        for(int r = 0; r < m; r++)
            for(int c = 0; c < n; c++) {
                // check if a hour glass is possible to compute
                if(r + 2 < m && c + 2 < n) {
                    long long sum = (row_sum[r][c+2] - (c > 0 ? row_sum[r][c-1] : 0)) + 
                                    grid[r+1][c+1] +
                                    (row_sum[r + 2][c+2] - (c > 0 ? row_sum[r + 2][c-1] : 0));
                    
                    max_sum = max(max_sum, sum);
                }
            }
        return max_sum;
    }
};





------------------------------------------------------------------------------------------------------------------------------------------------------------------
1856. Maximum Subarray Min-Product
https://leetcode.com/problems/maximum-subarray-min-product/

I came up with 3 different solutions for this problem, but they did not work (WA or TLE). I got the intuition that we need a monostack, but somehow it was hard for me to comprehend.

We store elements in a stack st in a non-decreasing order. When we need to remove an element j from the stack, it means:

Elements from j to i - 1 are all greater than j.
Elements after the new top of the stack iare all greater than j.
Therefore, we can multiply the current element j to the sum of all elements between the new top of the stack and i. In the example shown on the following picture, you can see that when we remove element 4 from the stack, we sum numbers between 1 (new top of the stack) and 2 (which is i).

Finally, we use a partial sum array dp to efficiently compute sum between elements j and i.

C++
To make it simple, we will store indexes of elements, as we can get their values from the original array. Note that we remove all remaining elements from the stack when i = n.size() in the second loop.

int maxSumMinProduct(vector<int>& n) {
    long res = 0;
    vector<long> dp(n.size() + 1), st;
    for (int i = 0; i < n.size(); ++i)
       dp[i + 1] = dp[i] + n[i];
    for (int i = 0; i <= n.size(); ++i) {
        while (!st.empty() && (i == n.size() || n[st.back()] > n[i])) {
            int j = st.back();
            st.pop_back();
            res = max(res, n[j] * (dp[i] - dp[st.empty() ? 0 : st.back() + 1]));
        }
        st.push_back(i);
    }
    return res % 1000000007;
}
