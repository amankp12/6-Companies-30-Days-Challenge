2260. Minimum Consecutive Cards to Pick Up
https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/

We need to find the minimum distance between any two matching cards.

For that, we can strore the last position of a card. If we find the matching card, we use the last position to find out the distance.

C++
Since the last array is initialized with zeros, we need to do i + 1.

int minimumCardPickup(vector<int>& cards) {
    int last[1000001] = {}, res = INT_MAX;
    for (int i = 0; i < cards.size(); ++i) {
        if (last[cards[i]])
            res = min(res, i - last[cards[i]] + 2);
        last[cards[i]] = i + 1;
    }
    return res == INT_MAX ? -1 : res;
}






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
659. Split Array into Consecutive Subsequences
https://leetcode.com/problems/split-array-into-consecutive-subsequences/

Explanation
I used a greedy algorithm.
leftis a hashmap, left[i] counts the number of i that I haven't placed yet.
end is a hashmap, end[i] counts the number of consecutive subsequences that ends at number i
Then I tried to split the nums one by one.
If I could neither add a number to the end of a existing consecutive subsequence nor find two following number in the left, I returned False


Complexity
Time O(N)
Space O(N)


C++

    bool isPossible(vector<int>& A) {
        unordered_map<int, int> left, end;
        for (int i: A) {
            left[i]++;
        }
        for (int i: A) {
            if (left[i] == 0) continue;
            left[i]--;
            if (end[i - 1] > 0) {   
                end[i - 1]--;
                end[i]++;
            } else if (left[i + 1] > 0 && left[i + 2] > 0) {
                left[i + 1]--;
                left[i + 2]--;
                end[i + 2]++;
            } else {   
                return false;
            }
        }
        return true;
    }
Python

    def isPossible(self, A):
        left = collections.Counter(A)
        end = collections.Counter()
        for i in A:
            if not left[i]: continue
            left[i] -= 1
            if end[i - 1] > 0:
                end[i - 1] -= 1
                end[i] += 1
            elif left[i + 1] and left[i + 2]:
                left[i + 1] -= 1
                left[i + 2] -= 1
                end[i + 2] += 1
            else:
                return False
        return True
        
        
        
        
        
        
---------------------------------------------------------------------------------------------------------------------------------------------------------------
447. Number of Boomerangs
https://leetcode.com/problems/number-of-boomerangs/

For each point i, map<distance d, count of all points at distance d from i>.
Given that count, choose 2 (with permutation) from it, to form a boomerang with point i.
[use long appropriately for dx, dy and key; though not required for the given test cases]

Time Complexity: O(n^2)

Updated: Using initial size for the map to avoid table resizing. Thanks @StefanPochmann

int numberOfBoomerangs(vector<pair<int, int>>& points) {
    
    int res = 0;
    
    // iterate over all the points
    for (int i = 0; i < points.size(); ++i) {
        
        unordered_map<long, int> group(points.size());
        
        // iterate over all points other than points[i]
        for (int j = 0; j < points.size(); ++j) {
            
            if (j == i) continue;
            
            int dy = points[i].second - points[j].second;
            int dx = points[i].first - points[j].first;
            
            // compute squared euclidean distance from points[i]
            int key = dy * dy;
            key += dx * dx;
            
            // accumulate # of such "j"s that are "key" distance from "i"
            ++group[key];
        }
        
        for (auto& p : group) {
            if (p.second > 1) {
                /*
                 * for all the groups of points, 
                 * number of ways to select 2 from n = 
                 * nP2 = n!/(n - 2)! = n * (n - 1)
                 */
                res += p.second * (p.second - 1);
            }
        }
    }
    return res;
}
