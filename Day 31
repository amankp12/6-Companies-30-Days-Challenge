692. Top K Frequent Words
https://leetcode.com/problems/top-k-frequent-words/

/*
  Given a set of strings we have to print top k frequent strings.
  We have to return the array such that the string with highest frequency comes first and lower later.
  If two strings have the same frequency then they should be ordered in lexiographical order
  LeetCode Question: 692 - https://leetcode.com/problems/top-k-frequent-words/
*/

#include <bits/stdc++.h>
using namespace std;

/*
  This question is almost same as top k frequent numbers in the set. The only here is we have to maintain certain order with the strings too.
*/

#define psi pair<int, string>


/* 
  If you are not familier with how to declare a custom comparator function then you can have a read over this stackoverflow thread.
  https://stackoverflow.com/questions/16111337/declaring-a-priority-queue-in-c-with-a-custom-comparator/48587737

  Basically, you can do it in many ways out of which i feel the doing it with the class is the simpler. We can also do it with 
  lamdha function but for that we would have to make some more arrangements which declaring our pioirity queue.

  Type 1:
  auto myComparator = [](const psi &p1 const psi &p2){
    if(p1.first == p2.first) return p1.second < p2.second;

    return p1.first > p2.first;
  } 

  While declaring the priority queue
  priority_queue<psi, vector<psi>, decltype(myComparator)> anyName(myComparator)

  Type 2: If you want to declare a normal function and use it in the priority queue then it can be done in the following way
  bool myComparator(const psi &p2 const psi *p2) {
    if(p1.first == p2.first) return p1.second < p2.second;

    return p1.first > p2.first;
  }

  While declaring the priority queue you just have to give the pointer to the function
  priority_queue<psi, vector<psi>, decltype(&myComparator)> anyName(myComparator)
 */
class myComparator {
  public:
    bool operator() (const psi &p1, const psi &p2) {
      if(p1.first == p2.first) return p1.second < p2.second;
      
      return p1.first > p2.first;
    }

    /* Here the point to note is how we are writing the compare function. 
      We will return true for what type of order we want to maintain. The order will be seen from bottom to top.
      Actually there are many ways to understand but after seeing lot of ways i found the below one more understandable and easier.
      
      We will see the ordering from bottom to top. So, if i say that the order is ascending then it means that the smaller elements 
      will be at the bottom and the higher elements will be at the top. (I'm taking tree representation of the heap, 
	  if you consider array representation then the higher values will be at right and lower at the left)

      Here if you are getting the doubt that - here the higher values are coming at the top and lower values are coming at the 
      bottom then it is max heap not min heap. Then please note that the priority queue that we have declared in the getTopKFreqStrings 
      is neither min heap nor max heap. 
      The working or the order in which the elements are stored in priority queue depends on the comparator function.

      General syntax to declare the priority queue is priority_queue<data_type, container, comparator>
      the default values for container is vector<data_type> and for comparator is less<data_type>. 
      It automatically take the datatype what to give.

      In case of max heap, we declare it as => priority_queue<int> maxHeap;
      Its basically a shorthand of this => priority_queue<int, vector<int>, less<int>> maxHeap; 
      we don't write the defualt values

      and in case of min heap we declare it as => priority_queue<int, vector<int> greater<int>> minHeap;

      note the comparator in both, its because of them the priority queue becomes min heap or max heap otherwise 
      from the name itself we can see (priority) so - to which elements we should give priority depends on the comparator function. 
      So, now lets come back to question

      So, as per the question we want the decreasing order for the frequency of the strings
      and increasing order in the lexiographical way
      so that the strings with the least frequency and cannot be fitted inside k can be poped.

      So, p1.first > p2.first will return true only when the frequency of first string is more than the second
      similary, p1.second < p2.second will return true when the string s1 in p1 is lexiographically smaller then string s2 in p2.
     */
};  

vector<string> getTopKFreqStrings(vector<string> &words, int k) {
  int n = words.size();

  /* First we will find the frequency of all the strings then we will keep track of the top k frequent strings with the help of priority queue */

  unordered_map<string, int> freq;

  for(string word : words) {
    freq[word]++;
  }

  priority_queue<psi, vector<psi>, myComparator> pq;
  /* Since here we want to order the elements in a different way we will write our own custom comparator function */
  /* For defining our own comparator function we would have to declare it in the class as done above */

  for(auto it : freq) {
    pq.push({it.second, it.first});

    if(pq.size() > k) {
      pq.pop();
    }
  }

  /* Now at this point the priority queue will contain the top k frequent elements or strings of the set */

  /* Since, we know that we want to find the top k frequent strings hence we can directly declare the size of the answer vector 
  and while psing we will get the strings in ascending order of the frequency hence we will put the strings from back side 
  so that we don't have to do an extra work to reverse the vector before returning  */
  vector<string> ans(k);
  int m = k-1;

  while(pq.size() > 0) {
    ans[m--] = pq.top().second;
    pq.pop();
  }

  return ans;
}

int main() {
  int n, k;
  cin >> n >> k;

  vector<string> arr(n);
  for(int i=0; i<n; i++) {
    string s; cin >> s;
    arr[i] = s;
  }

  vector<string> topKFreq(getTopKFreqStrings(arr, k));

  for(string s : topKFreq) {
    cout << s << " ";
  }

  return 0;
}





--------------------------------------------------------------------------------------------------------------------------------------------------------------------
1503. Last Moment Before All Ants Fall Out of a Plank
https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/

Intuition
When two ants meet at some point,
they change their directions and continue moving again.
But you can assume they don't change direction and keep moving.

(You don't really know the difference of ants between one and the other, do you?)

Explanation
For ants in direction of left, the leaving time is left[i]
For ants in direction of right, the leaving time is n - right[i]

Complexity
Time O(N)
Space O(1)

C++:

    int getLastMoment(int n, vector<int>& left, vector<int>& right) {
        int res = 0;
        for (int& i: left)
            res = max(res, i);
        for (int& i: right)
            res = max(res, n - i);
        return res;
    }
    
    
    
    
    
-----------------------------------------------------------------------------------------------------------------------------------------------------------
478. Generate Random Point in a Circle
https://leetcode.com/problems/generate-random-point-in-a-circle/

We know that any point in a circle is of the form - (Rcosθ, Rsinθ). For circles having center other than origin, this becomes - (Xc + Rcosθ, Yc + Rsinθ).
We might choose the approach to select random integer [0, 1] and multiply by R to generate a point uniformly between [0, R], then generate a random θ and finally
generate points using the above-mentioned formula.

However, the set of points generated by above approach won't be uniformly distributed and more biased towards the center. This is because, the area towards
the outer of circle is greater than towards the inner end of circle.

So, for a section of circle (θ, θ+Δ), for the points to be uniform, we need to generate more points towards the outer circle than we need towards inner of circle.

For this purpose, we use the square root function on the randomly generated point between [0, 1] (watch sqrt() is applied to random() in below code) to bias the
outer end circle points. Note that after applying sqrt on random() (a point between [0, 1]), the result would be a value greater than the original random()
thus making it biased more towards the outer end. This makes the point uniformly generated over all of the circle.

class Solution {
    double R, X, Y;
public:
    Solution(double radius, double x_center, double y_center) : R(radius), X(x_center), Y(y_center) {
        srand(time(0));
    }
    double random(){
        return (double)rand() / RAND_MAX; // for generating random points between 0 to 1
    }
    vector<double> randPoint() {
        vector<double> randomPoint(2);
        double len = sqrt(random()) * R, deg = 2 * M_PI * random();
        randomPoint[0] = X + len * cos(deg);
        randomPoint[1] = Y + len * sin(deg);
        return randomPoint;
    }
};
Reason for choosing Square root function

The reason for choosing sqrt() rather than any other functions like cbrt() to bias it towards outer end is that in the first approach mentioned above, the points
generated were proportional to R^2 because our random was proportional to R, thus making points over all area of circle proportional to R^2 which made them
concentrated more towards the center. Making our random proportional to sqrt(R) would make the points generated over all the area of circle proportional to R
which would make all the points generate uniformly throughout the circle.
